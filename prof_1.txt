Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 95.93     43.80    43.80   233750     0.00     0.00  std::enable_if<((1)==(1))&&(((2)>(1))), void>::type tensormul<1, 2, float>(TSpan<1, float> const&, TSpan<2, float> const&, TSpan<((1)+(2))-(2), float>)
  1.20     44.35     0.55      350     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3})
  0.55     44.60     0.25   121050     0.00     0.00  fc::ff(RTSpan<float> const&, bool, bool)
  0.44     44.80     0.20    60875     0.00     0.00  Tensor<float>::Tensor(float const*, int const*, unsigned long)
  0.42     44.99     0.19 33587200     0.00     0.00  oddln::operator()(float)
  0.28     45.12     0.13      350     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2})
  0.26     45.24     0.12      350     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1})
  0.24     45.35     0.11        1     0.11     0.13  load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  0.13     45.41     0.06      350     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensoreltwise<2, std::plus<float>, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>, std::plus<float>)
  0.09     45.45     0.04  2867200     0.00     0.00  oddln::operator[](float)
  0.07     45.48     0.03    60175     0.00     0.00  Model::ff(RTSpan<float> const&, bool, bool)
  0.04     45.50     0.02   121050     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&, TSpan<((2)+(2))-(2), float>)
  0.04     45.52     0.02    60350     0.00     0.00  softmax::ff(RTSpan<float> const&, bool, bool)
  0.04     45.54     0.02      350     0.00     0.00  fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool)
  0.04     45.56     0.02      175     0.00     0.00  softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool)
  0.02     45.57     0.01   188412     0.00     0.00  Tensor<float>::Tensor(int const*, unsigned long)
  0.02     45.58     0.01   121050     0.00     0.00  Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&)
  0.02     45.59     0.01   120350     0.00     0.00  fc::can_accept(int) const
  0.02     45.60     0.01    60000     0.00     0.00  std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair(std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const&)
  0.02     45.61     0.01    56000     0.00     0.00  identity::operator[](float)
  0.02     45.62     0.01       17     0.00     0.00  void std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >::_M_realloc_insert<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > >(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >&&)
  0.02     45.63     0.01        2     0.01     0.01  fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
  0.02     45.64     0.01        2     0.01     0.01  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
  0.02     45.65     0.01        1     0.01    43.91  evaluate_mnist(Model&, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > const&)
  0.02     45.66     0.01        1     0.01     0.01  oddln::~oddln()
  0.00     45.66     0.00   656000     0.00     0.00  identity::operator()(float)
  0.00     45.66     0.00   183150     0.00     0.00  TSpan<2, float>::TSpan(RTSpan<float> const&)
  0.00     45.66     0.00   120350     0.00     0.00  fc::num_outputs(int) const
  0.00     45.66     0.00    60175     0.00     0.00  layer::can_accept(int) const
  0.00     45.66     0.00    60175     0.00     0.00  softmax::num_outputs(int) const
  0.00     45.66     0.00    60000     0.00     0.00  std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair<std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, true>(std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&)
  0.00     45.66     0.00     5600     0.00     0.00  std::enable_if<((2)>(1)), void>::type tensormul<2, 1, float>(TSpan<2, float> const&, TSpan<1, float> const&, TSpan<((2)+(1))-(2), float>)
  0.00     45.66     0.00     1050     0.00     0.00  Tensor<float>::Tensor(Tensor<float> const&)
  0.00     45.66     0.00      700     0.00     0.00  TSpan<1, float>::TSpan(RTSpan<float> const&)
  0.00     45.66     0.00      350     0.00     0.00  void tensorplus<1, float>(TSpan<1, float>, TSpan<1, float>, TSpan<1, float>)
  0.00     45.66     0.00      350     0.00     0.00  void tensorplus<2, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>)
  0.00     45.66     0.00      350     0.00     0.00  Adam<1>::get_deltas(RTSpan<float> const&)
  0.00     45.66     0.00      350     0.00     0.00  Adam<1>::update(RTSpan<float>&, RTSpan<float> const&)
  0.00     45.66     0.00      350     0.00     0.00  Adam<2>::get_deltas(RTSpan<float> const&)
  0.00     45.66     0.00      350     0.00     0.00  Adam<2>::update(RTSpan<float>&, RTSpan<float> const&)
  0.00     45.66     0.00      350     0.00     0.00  void optimizer::update_tspan<1>(TSpan<1, float>&, TSpan<1, float> const&)
  0.00     45.66     0.00      350     0.00     0.00  void optimizer::update_tspan<2>(TSpan<2, float>&, TSpan<2, float> const&)
  0.00     45.66     0.00      350     0.00     0.00  void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<Tensor<float> >(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, Tensor<float>&&)
  0.00     45.66     0.00      175     0.00     0.00  nll::cc(RTSpan<float> const&, RTSpan<float> const&)
  0.00     45.66     0.00      175     0.00     0.00  nll::gg(RTSpan<float> const&, RTSpan<float> const&)
  0.00     45.66     0.00      175     0.00     0.01  Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool)
  0.00     45.66     0.00      175     0.00     0.00  void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<RTSpan<float> const&>(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, RTSpan<float> const&)
  0.00     45.66     0.00        3     0.00     0.00  void std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > >::_M_realloc_insert<std::shared_ptr<layer> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<layer>*, std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > > >, std::shared_ptr<layer> const&)
  0.00     45.66     0.00        3     0.00     0.00  _init
  0.00     45.66     0.00        2     0.00     0.00  fc::gen_name[abi:cxx11]()
  0.00     45.66     0.00        2     0.00     0.01  fc::~fc()
  0.00     45.66     0.00        2     0.00     0.00  Adam<1>::advise_size(int const*, int)
  0.00     45.66     0.00        2     0.00     0.00  Adam<1>::~Adam()
  0.00     45.66     0.00        2     0.00     0.00  Adam<1>::~Adam()
  0.00     45.66     0.00        2     0.00     0.00  Adam<2>::advise_size(int const*, int)
  0.00     45.66     0.00        2     0.00     0.00  Adam<2>::~Adam()
  0.00     45.66     0.00        2     0.00     0.00  Adam<2>::~Adam()
  0.00     45.66     0.00        2     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00     45.66     0.00        2     0.00     0.00  std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
  0.00     45.66     0.00        2     0.00     0.00  std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
  0.00     45.66     0.00        2     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
  0.00     45.66     0.00        2     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)
  0.00     45.66     0.00        1     0.00     1.60  train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >)
  0.00     45.66     0.00        1     0.00     0.00  layer::~layer()
  0.00     45.66     0.00        1     0.00     0.00  identity::~identity()
  0.00     45.66     0.00        1     0.00     0.01  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&)
  0.00     45.66     0.00        1     0.00     0.01  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&)
  0.00     45.66     0.00        1     0.00     0.01  std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*>(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, __gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*)
  0.00     45.66     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
  0.00     45.66     0.00        1     0.00     0.00  std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.02% of 45.66 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   45.66                 main [1]
                0.01   43.90       1/1           evaluate_mnist(Model&, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > const&) [4]
                0.00    1.60       1/1           train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
                0.11    0.02       1/1           load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [18]
                0.00    0.01       2/2           fc::~fc() [31]
                0.00    0.01       1/1           std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*>(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, __gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*) [34]
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [71]
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [70]
                0.00    0.00       1/1           layer::~layer() [74]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [77]
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [76]
-----------------------------------------------
                0.00    0.13     175/60175       train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
                0.03   43.87   60000/60175       evaluate_mnist(Model&, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > const&) [4]
[2]     96.4    0.03   44.00   60175         Model::ff(RTSpan<float> const&, bool, bool) [2]
                0.25   43.52  120350/121050      fc::ff(RTSpan<float> const&, bool, bool) [3]
                0.20    0.00   60175/60875       Tensor<float>::Tensor(float const*, int const*, unsigned long) [15]
                0.02    0.00   60175/60350       softmax::ff(RTSpan<float> const&, bool, bool) [23]
                0.01    0.00  120350/120350      fc::can_accept(int) const [27]
                0.00    0.00  120350/120350      fc::num_outputs(int) const [52]
                0.00    0.00   60175/60175       layer::can_accept(int) const [53]
                0.00    0.00   60175/60175       softmax::num_outputs(int) const [54]
-----------------------------------------------
                0.00    0.13     350/121050      Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
                0.00    0.13     350/121050      fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.25   43.52  120350/121050      Model::ff(RTSpan<float> const&, bool, bool) [2]
[3]     96.4    0.25   43.78  121050         fc::ff(RTSpan<float> const&, bool, bool) [3]
                0.01   43.58  120350/121050      Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [5]
                0.19    0.00 33587200/33587200     oddln::operator()(float) [16]
                0.00    0.00  656000/656000      identity::operator()(float) [50]
                0.00    0.00  121050/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
                0.00    0.00    1050/1050        Tensor<float>::Tensor(Tensor<float> const&) [57]
-----------------------------------------------
                0.01   43.90       1/1           main [1]
[4]     96.2    0.01   43.90       1         evaluate_mnist(Model&, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > const&) [4]
                0.03   43.87   60000/60175       Model::ff(RTSpan<float> const&, bool, bool) [2]
-----------------------------------------------
                0.00    0.25     700/121050      fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.01   43.58  120350/121050      fc::ff(RTSpan<float> const&, bool, bool) [3]
[5]     96.0    0.01   43.83  121050         Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [5]
                0.02   43.80  121050/121050      std::enable_if<((2)>(1)), void>::type tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&, TSpan<((2)+(2))-(2), float>) [6]
                0.01    0.00  121050/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
-----------------------------------------------
                0.02   43.80  121050/121050      Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [5]
[6]     96.0    0.02   43.80  121050         std::enable_if<((2)>(1)), void>::type tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&, TSpan<((2)+(2))-(2), float>) [6]
               43.80    0.00  233750/233750      std::enable_if<((1)==(1))&&(((2)>(1))), void>::type tensormul<1, 2, float>(TSpan<1, float> const&, TSpan<2, float> const&, TSpan<((1)+(2))-(2), float>) [7]
-----------------------------------------------
               43.80    0.00  233750/233750      std::enable_if<((2)>(1)), void>::type tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&, TSpan<((2)+(2))-(2), float>) [6]
[7]     95.9   43.80    0.00  233750         std::enable_if<((1)==(1))&&(((2)>(1))), void>::type tensormul<1, 2, float>(TSpan<1, float> const&, TSpan<2, float> const&, TSpan<((1)+(2))-(2), float>) [7]
-----------------------------------------------
                0.00    1.60       1/1           main [1]
[8]      3.5    0.00    1.60       1         train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
                0.00    1.46     175/175         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
                0.00    0.13     175/60175       Model::ff(RTSpan<float> const&, bool, bool) [2]
                0.00    0.01       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&) [36]
                0.00    0.01       1/1           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&) [35]
                0.00    0.00     175/175         nll::gg(RTSpan<float> const&, RTSpan<float> const&) [41]
                0.00    0.00     175/175         nll::cc(RTSpan<float> const&, RTSpan<float> const&) [61]
                0.00    0.00       3/3           void std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > >::_M_realloc_insert<std::shared_ptr<layer> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<layer>*, std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > > >, std::shared_ptr<layer> const&) [62]
-----------------------------------------------
                0.00    1.46     175/175         train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[9]      3.2    0.00    1.46     175         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
                0.02    1.29     350/350         fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.00    0.13     350/121050      fc::ff(RTSpan<float> const&, bool, bool) [3]
                0.02    0.00     175/175         softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
                0.00    0.00     175/175         void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<RTSpan<float> const&>(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, RTSpan<float> const&) [37]
                0.00    0.00     175/60875       Tensor<float>::Tensor(float const*, int const*, unsigned long) [15]
                0.00    0.00     350/350         void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<Tensor<float> >(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, Tensor<float>&&) [60]
-----------------------------------------------
                0.02    1.29     350/350         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
[10]     2.9    0.02    1.29     350         fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.00    0.86     350/350         void optimizer::update_tspan<2>(TSpan<2, float>&, TSpan<2, float> const&) [12]
                0.00    0.25     700/121050      Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [5]
                0.00    0.13     350/121050      fc::ff(RTSpan<float> const&, bool, bool) [3]
                0.04    0.00 2867200/2867200     oddln::operator[](float) [22]
                0.01    0.00   56000/56000       identity::operator[](float) [29]
                0.00    0.00     350/60875       Tensor<float>::Tensor(float const*, int const*, unsigned long) [15]
                0.00    0.00     350/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00     350/350         void optimizer::update_tspan<1>(TSpan<1, float>&, TSpan<1, float> const&) [40]
                0.00    0.00     700/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.00    0.86     350/350         void optimizer::update_tspan<2>(TSpan<2, float>&, TSpan<2, float> const&) [12]
[11]     1.9    0.00    0.86     350         Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [11]
                0.00    0.80     350/350         Adam<2>::get_deltas(RTSpan<float> const&) [13]
                0.00    0.06     350/350         void tensorplus<2, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>) [20]
                0.00    0.00     350/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.00    0.86     350/350         fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
[12]     1.9    0.00    0.86     350         void optimizer::update_tspan<2>(TSpan<2, float>&, TSpan<2, float> const&) [12]
                0.00    0.86     350/350         Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [11]
-----------------------------------------------
                0.00    0.80     350/350         Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [11]
[13]     1.8    0.00    0.80     350         Adam<2>::get_deltas(RTSpan<float> const&) [13]
                0.55    0.00     350/350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}) [14]
                0.13    0.00     350/350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}) [17]
                0.12    0.00     350/350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}) [19]
                0.00    0.00     350/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00     350/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.55    0.00     350/350         Adam<2>::get_deltas(RTSpan<float> const&) [13]
[14]     1.2    0.55    0.00     350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}) [14]
-----------------------------------------------
                0.00    0.00     175/60875       Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
                0.00    0.00     175/60875       void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<RTSpan<float> const&>(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, RTSpan<float> const&) [37]
                0.00    0.00     350/60875       fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.20    0.00   60175/60875       Model::ff(RTSpan<float> const&, bool, bool) [2]
[15]     0.4    0.20    0.00   60875         Tensor<float>::Tensor(float const*, int const*, unsigned long) [15]
-----------------------------------------------
                0.19    0.00 33587200/33587200     fc::ff(RTSpan<float> const&, bool, bool) [3]
[16]     0.4    0.19    0.00 33587200         oddln::operator()(float) [16]
-----------------------------------------------
                0.13    0.00     350/350         Adam<2>::get_deltas(RTSpan<float> const&) [13]
[17]     0.3    0.13    0.00     350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}) [17]
-----------------------------------------------
                0.11    0.02       1/1           main [1]
[18]     0.3    0.11    0.02       1         load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [18]
                0.01    0.00      17/17          void std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >::_M_realloc_insert<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > >(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >&&) [30]
                0.01    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [32]
                0.00    0.00   60000/60000       std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair<std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, true>(std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&) [55]
-----------------------------------------------
                0.12    0.00     350/350         Adam<2>::get_deltas(RTSpan<float> const&) [13]
[19]     0.3    0.12    0.00     350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}) [19]
-----------------------------------------------
                0.00    0.06     350/350         Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [11]
[20]     0.1    0.00    0.06     350         void tensorplus<2, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>) [20]
                0.06    0.00     350/350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, std::plus<float>, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>, std::plus<float>) [21]
-----------------------------------------------
                0.06    0.00     350/350         void tensorplus<2, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>) [20]
[21]     0.1    0.06    0.00     350         std::enable_if<((2)>(1)), void>::type tensoreltwise<2, std::plus<float>, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>, std::plus<float>) [21]
-----------------------------------------------
                0.04    0.00 2867200/2867200     fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
[22]     0.1    0.04    0.00 2867200         oddln::operator[](float) [22]
-----------------------------------------------
                0.00    0.00     175/60350       softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
                0.02    0.00   60175/60350       Model::ff(RTSpan<float> const&, bool, bool) [2]
[23]     0.1    0.02    0.00   60350         softmax::ff(RTSpan<float> const&, bool, bool) [23]
                0.00    0.00   60350/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00   60350/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.02    0.00     175/175         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
[24]     0.0    0.02    0.00     175         softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
                0.00    0.00    5775/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00     175/60350       softmax::ff(RTSpan<float> const&, bool, bool) [23]
                0.00    0.00    5600/5600        std::enable_if<((2)>(1)), void>::type tensormul<2, 1, float>(TSpan<2, float> const&, TSpan<1, float> const&, TSpan<((2)+(1))-(2), float>) [56]
                0.00    0.00     350/183150      TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.01    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&) [36]
                0.01    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&) [35]
[25]     0.0    0.01    0.00       2         fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
                0.00    0.00       4/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00       2/2           Adam<2>::advise_size(int const*, int) [43]
                0.00    0.00       2/2           Adam<1>::advise_size(int const*, int) [42]
-----------------------------------------------
                0.00    0.00       4/188412      Adam<2>::advise_size(int const*, int) [43]
                0.00    0.00       4/188412      Adam<1>::advise_size(int const*, int) [42]
                0.00    0.00       4/188412      fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
                0.00    0.00     175/188412      nll::gg(RTSpan<float> const&, RTSpan<float> const&) [41]
                0.00    0.00     350/188412      Adam<2>::get_deltas(RTSpan<float> const&) [13]
                0.00    0.00     350/188412      Adam<1>::get_deltas(RTSpan<float> const&) [38]
                0.00    0.00     350/188412      fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.00    0.00    5775/188412      softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
                0.00    0.00   60350/188412      softmax::ff(RTSpan<float> const&, bool, bool) [23]
                0.01    0.00  121050/188412      Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [5]
[26]     0.0    0.01    0.00  188412         Tensor<float>::Tensor(int const*, unsigned long) [26]
-----------------------------------------------
                0.01    0.00  120350/120350      Model::ff(RTSpan<float> const&, bool, bool) [2]
[27]     0.0    0.01    0.00  120350         fc::can_accept(int) const [27]
-----------------------------------------------
                0.01    0.00   60000/60000       std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*>(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, __gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*) [34]
[28]     0.0    0.01    0.00   60000         std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair(std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const&) [28]
-----------------------------------------------
                0.01    0.00   56000/56000       fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
[29]     0.0    0.01    0.00   56000         identity::operator[](float) [29]
-----------------------------------------------
                0.01    0.00      17/17          load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [18]
[30]     0.0    0.01    0.00      17         void std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >::_M_realloc_insert<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > >(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >&&) [30]
-----------------------------------------------
                0.00    0.01       2/2           main [1]
[31]     0.0    0.00    0.01       2         fc::~fc() [31]
                0.01    0.00       1/1           oddln::~oddln() [33]
                0.00    0.00       2/2           Adam<1>::~Adam() [65]
                0.00    0.00       2/2           Adam<2>::~Adam() [67]
                0.00    0.00       1/1           identity::~identity() [75]
-----------------------------------------------
                0.01    0.00       2/2           load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [18]
[32]     0.0    0.01    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [32]
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) [73]
-----------------------------------------------
                0.01    0.00       1/1           fc::~fc() [31]
[33]     0.0    0.01    0.00       1         oddln::~oddln() [33]
-----------------------------------------------
                0.00    0.01       1/1           main [1]
[34]     0.0    0.00    0.01       1         std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*>(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, __gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*) [34]
                0.01    0.00   60000/60000       std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair(std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const&) [28]
-----------------------------------------------
                0.00    0.01       1/1           train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[35]     0.0    0.00    0.01       1         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&) [35]
                0.01    0.00       1/2           fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
                0.00    0.00       1/2           fc::gen_name[abi:cxx11]() [64]
-----------------------------------------------
                0.00    0.01       1/1           train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[36]     0.0    0.00    0.01       1         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&) [36]
                0.01    0.00       1/2           fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
                0.00    0.00       1/2           fc::gen_name[abi:cxx11]() [64]
-----------------------------------------------
                0.00    0.00     175/175         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
[37]     0.0    0.00    0.00     175         void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<RTSpan<float> const&>(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, RTSpan<float> const&) [37]
                0.00    0.00     175/60875       Tensor<float>::Tensor(float const*, int const*, unsigned long) [15]
-----------------------------------------------
                0.00    0.00     350/350         Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [39]
[38]     0.0    0.00    0.00     350         Adam<1>::get_deltas(RTSpan<float> const&) [38]
                0.00    0.00     350/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
                0.00    0.00     350/700         TSpan<1, float>::TSpan(RTSpan<float> const&) [58]
-----------------------------------------------
                0.00    0.00     350/350         void optimizer::update_tspan<1>(TSpan<1, float>&, TSpan<1, float> const&) [40]
[39]     0.0    0.00    0.00     350         Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [39]
                0.00    0.00     350/350         Adam<1>::get_deltas(RTSpan<float> const&) [38]
                0.00    0.00     350/700         TSpan<1, float>::TSpan(RTSpan<float> const&) [58]
                0.00    0.00     350/350         void tensorplus<1, float>(TSpan<1, float>, TSpan<1, float>, TSpan<1, float>) [59]
-----------------------------------------------
                0.00    0.00     350/350         fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
[40]     0.0    0.00    0.00     350         void optimizer::update_tspan<1>(TSpan<1, float>&, TSpan<1, float> const&) [40]
                0.00    0.00     350/350         Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [39]
-----------------------------------------------
                0.00    0.00     175/175         train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[41]     0.0    0.00    0.00     175         nll::gg(RTSpan<float> const&, RTSpan<float> const&) [41]
                0.00    0.00     175/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
-----------------------------------------------
                0.00    0.00       2/2           fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
[42]     0.0    0.00    0.00       2         Adam<1>::advise_size(int const*, int) [42]
                0.00    0.00       4/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
-----------------------------------------------
                0.00    0.00       2/2           fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [25]
[43]     0.0    0.00    0.00       2         Adam<2>::advise_size(int const*, int) [43]
                0.00    0.00       4/188412      Tensor<float>::Tensor(int const*, unsigned long) [26]
-----------------------------------------------
                0.00    0.00  656000/656000      fc::ff(RTSpan<float> const&, bool, bool) [3]
[50]     0.0    0.00    0.00  656000         identity::operator()(float) [50]
-----------------------------------------------
                0.00    0.00     350/183150      Adam<2>::get_deltas(RTSpan<float> const&) [13]
                0.00    0.00     350/183150      Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [11]
                0.00    0.00     350/183150      softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
                0.00    0.00     700/183150      fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [10]
                0.00    0.00   60350/183150      softmax::ff(RTSpan<float> const&, bool, bool) [23]
                0.00    0.00  121050/183150      fc::ff(RTSpan<float> const&, bool, bool) [3]
[51]     0.0    0.00    0.00  183150         TSpan<2, float>::TSpan(RTSpan<float> const&) [51]
-----------------------------------------------
                0.00    0.00  120350/120350      Model::ff(RTSpan<float> const&, bool, bool) [2]
[52]     0.0    0.00    0.00  120350         fc::num_outputs(int) const [52]
-----------------------------------------------
                0.00    0.00   60175/60175       Model::ff(RTSpan<float> const&, bool, bool) [2]
[53]     0.0    0.00    0.00   60175         layer::can_accept(int) const [53]
-----------------------------------------------
                0.00    0.00   60175/60175       Model::ff(RTSpan<float> const&, bool, bool) [2]
[54]     0.0    0.00    0.00   60175         softmax::num_outputs(int) const [54]
-----------------------------------------------
                0.00    0.00   60000/60000       load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [18]
[55]     0.0    0.00    0.00   60000         std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair<std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, true>(std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&) [55]
-----------------------------------------------
                0.00    0.00    5600/5600        softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [24]
[56]     0.0    0.00    0.00    5600         std::enable_if<((2)>(1)), void>::type tensormul<2, 1, float>(TSpan<2, float> const&, TSpan<1, float> const&, TSpan<((2)+(1))-(2), float>) [56]
-----------------------------------------------
                0.00    0.00    1050/1050        fc::ff(RTSpan<float> const&, bool, bool) [3]
[57]     0.0    0.00    0.00    1050         Tensor<float>::Tensor(Tensor<float> const&) [57]
-----------------------------------------------
                0.00    0.00     350/700         Adam<1>::get_deltas(RTSpan<float> const&) [38]
                0.00    0.00     350/700         Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [39]
[58]     0.0    0.00    0.00     700         TSpan<1, float>::TSpan(RTSpan<float> const&) [58]
-----------------------------------------------
                0.00    0.00     350/350         Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [39]
[59]     0.0    0.00    0.00     350         void tensorplus<1, float>(TSpan<1, float>, TSpan<1, float>, TSpan<1, float>) [59]
-----------------------------------------------
                0.00    0.00     350/350         Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [9]
[60]     0.0    0.00    0.00     350         void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<Tensor<float> >(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, Tensor<float>&&) [60]
-----------------------------------------------
                0.00    0.00     175/175         train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[61]     0.0    0.00    0.00     175         nll::cc(RTSpan<float> const&, RTSpan<float> const&) [61]
-----------------------------------------------
                0.00    0.00       3/3           train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [8]
[62]     0.0    0.00    0.00       3         void std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > >::_M_realloc_insert<std::shared_ptr<layer> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<layer>*, std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > > >, std::shared_ptr<layer> const&) [62]
-----------------------------------------------
                0.00    0.00       3/3           __libc_csu_init [104]
[63]     0.0    0.00    0.00       3         _init [63]
-----------------------------------------------
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&) [36]
                0.00    0.00       1/2           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&) [35]
[64]     0.0    0.00    0.00       2         fc::gen_name[abi:cxx11]() [64]
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [72]
-----------------------------------------------
                0.00    0.00       2/2           fc::~fc() [31]
[65]     0.0    0.00    0.00       2         Adam<1>::~Adam() [65]
                0.00    0.00       2/2           Adam<1>::~Adam() [66]
-----------------------------------------------
                0.00    0.00       2/2           Adam<1>::~Adam() [65]
[66]     0.0    0.00    0.00       2         Adam<1>::~Adam() [66]
-----------------------------------------------
                0.00    0.00       2/2           fc::~fc() [31]
[67]     0.0    0.00    0.00       2         Adam<2>::~Adam() [67]
                0.00    0.00       2/2           Adam<2>::~Adam() [68]
-----------------------------------------------
                0.00    0.00       2/2           Adam<2>::~Adam() [67]
[68]     0.0    0.00    0.00       2         Adam<2>::~Adam() [68]
-----------------------------------------------
                0.00    0.00       2/2           fc::gen_name[abi:cxx11]() [64]
[69]     0.0    0.00    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [69]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[70]     0.0    0.00    0.00       2         std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [70]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[71]     0.0    0.00    0.00       2         std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [71]
-----------------------------------------------
                0.00    0.00       2/2           fc::gen_name[abi:cxx11]() [64]
[72]     0.0    0.00    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long) [72]
-----------------------------------------------
                0.00    0.00       2/2           std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*) [32]
[73]     0.0    0.00    0.00       2         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) [73]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[74]     0.0    0.00    0.00       1         layer::~layer() [74]
-----------------------------------------------
                0.00    0.00       1/1           fc::~fc() [31]
[75]     0.0    0.00    0.00       1         identity::~identity() [75]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[76]     0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [76]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[77]     0.0    0.00    0.00       1         std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [77]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2018 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [59] void tensorplus<1, float>(TSpan<1, float>, TSpan<1, float>, TSpan<1, float>) [66] Adam<1>::~Adam() [12] void optimizer::update_tspan<2>(TSpan<2, float>&, TSpan<2, float> const&)
  [20] void tensorplus<2, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>) [13] Adam<2>::get_deltas(RTSpan<float> const&) [27] fc::can_accept(int) const
   [8] train_mnist(std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >) [43] Adam<2>::advise_size(int const*, int) [52] fc::num_outputs(int) const
  [21] std::enable_if<((2)>(1)), void>::type tensoreltwise<2, std::plus<float>, float>(TSpan<2, float>, TSpan<2, float>, TSpan<2, float>, std::plus<float>) [11] Adam<2>::update(RTSpan<float>&, RTSpan<float> const&) [53] layer::can_accept(int) const
  [17] std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#2}) [67] Adam<2>::~Adam() [54] softmax::num_outputs(int) const
  [14] std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#3}) [68] Adam<2>::~Adam() [35] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int const&, int, identity*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int const&, int&&, identity*&&, Adam<2>*&&, Adam<1>*&&)
  [19] std::enable_if<((2)>(1)), void>::type tensoreltwise<2, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}, float>(TSpan<2, float>, float, float, Adam<2>::get_deltas(RTSpan<float> const&)::{lambda(float, float)#1}) [9] Model::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [36] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<fc, std::allocator<fc>, int, int const&, oddln*, Adam<2>*, Adam<1>*>(fc*&, std::_Sp_alloc_shared_tag<std::allocator<fc> >, int&&, int const&, oddln*&&, Adam<2>*&&, Adam<1>*&&)
   [4] evaluate_mnist(Model&, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > const&) [2] Model::ff(RTSpan<float> const&, bool, bool) [34] std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*>(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, __gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*)
  [18] load_mnist_training(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [58] TSpan<1, float>::TSpan(RTSpan<float> const&) [70] std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
   [7] std::enable_if<((1)==(1))&&(((2)>(1))), void>::type tensormul<1, 2, float>(TSpan<1, float> const&, TSpan<2, float> const&, TSpan<((1)+(2))-(2), float>) [51] TSpan<2, float>::TSpan(RTSpan<float> const&) [71] std::_Sp_counted_ptr_inplace<fc, std::allocator<fc>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
  [56] std::enable_if<((2)>(1)), void>::type tensormul<2, 1, float>(TSpan<2, float> const&, TSpan<1, float> const&, TSpan<((2)+(1))-(2), float>) [74] layer::~layer() [76] std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
   [5] Tensor<float> tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&) [33] oddln::~oddln() [77] std::_Sp_counted_ptr_inplace<softmax, std::allocator<softmax>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
   [6] std::enable_if<((2)>(1)), void>::type tensormul<2, 2, float>(TSpan<2, float> const&, TSpan<2, float> const&, TSpan<((2)+(2))-(2), float>) [16] oddln::operator()(float) [28] std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair(std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > const&)
  [10] fc::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [22] oddln::operator[](float) [55] std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >::pair<std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, true>(std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&)
   [3] fc::ff(RTSpan<float> const&, bool, bool) [15] Tensor<float>::Tensor(float const*, int const*, unsigned long) [37] void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<RTSpan<float> const&>(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, RTSpan<float> const&)
  [64] fc::gen_name[abi:cxx11]() [26] Tensor<float>::Tensor(int const*, unsigned long) [60] void std::vector<Tensor<float>, std::allocator<Tensor<float> > >::_M_realloc_insert<Tensor<float> >(__gnu_cxx::__normal_iterator<Tensor<float>*, std::vector<Tensor<float>, std::allocator<Tensor<float> > > >, Tensor<float>&&)
  [25] fc::fc(int, int, activation_fn*, optimizer*, optimizer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [57] Tensor<float>::Tensor(Tensor<float> const&) [62] void std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > >::_M_realloc_insert<std::shared_ptr<layer> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<layer>*, std::vector<std::shared_ptr<layer>, std::allocator<std::shared_ptr<layer> > > >, std::shared_ptr<layer> const&)
  [31] fc::~fc()              [24] softmax::bp(RTSpan<float> const&, RTSpan<float> const&, bool) [30] void std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > >::_M_realloc_insert<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > >(__gnu_cxx::__normal_iterator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >*, std::vector<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >, std::allocator<std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > > > > >, std::pair<std::vector<float, std::allocator<float> >, std::vector<float, std::allocator<float> > >&&)
  [61] nll::cc(RTSpan<float> const&, RTSpan<float> const&) [23] softmax::ff(RTSpan<float> const&, bool, bool) [72] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
  [41] nll::gg(RTSpan<float> const&, RTSpan<float> const&) [75] identity::~identity() [73] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)
  [38] Adam<1>::get_deltas(RTSpan<float> const&) [50] identity::operator()(float) [32] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
  [42] Adam<1>::advise_size(int const*, int) [29] identity::operator[](float) [63] _init
  [39] Adam<1>::update(RTSpan<float>&, RTSpan<float> const&) [69] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  [65] Adam<1>::~Adam()       [40] void optimizer::update_tspan<1>(TSpan<1, float>&, TSpan<1, float> const&)
